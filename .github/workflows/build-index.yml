name: Build index.json (with title & dates)

on:
  push:
    branches: [ main ]    # change if your default branch is different
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate index.json (parse index.html for title/date + git last modified)
        run: |
          python3 - <<'PY'
          import os, re, json, subprocess
          repo_root = '.'
          posts_root = repo_root
          images_root = os.path.join(repo_root, 'Images')

          def extract_from_html(path):
              title = None
              date = None
              try:
                  text = open(path, 'r', encoding='utf-8').read()
              except Exception:
                  return (None, None)
              h1 = re.search(r'<h1[^>]*>(.*?)</h1>', text, flags=re.IGNORECASE | re.DOTALL)
              if h1:
                  title = re.sub(r'<[^>]+>', '', h1.group(1)).strip()
              pd = re.search(r'<p[^>]*class=["\']post-date["\'][^>]*>(.*?)</p>', text, flags=re.IGNORECASE | re.DOTALL)
              if pd:
                  date = re.sub(r'<[^>]+>', '', pd.group(1)).strip()
              return (title, date)

          def git_last_modified_iso(path):
              try:
                  completed = subprocess.run(['git','log','-1','--format=%cI','--', path], check=True, capture_output=True, text=True)
                  out = completed.stdout.strip()
                  return out if out else None
              except Exception:
                  return None

          posts = []
          for entry in sorted(os.listdir(posts_root)):
              if entry.startswith('.') or entry == '.github':
                  continue
              p = os.path.join(posts_root, entry)
              if os.path.isdir(p):
                  index_html = os.path.join(p, 'index.html')
                  if os.path.exists(index_html):
                      title, published_date = extract_from_html(index_html)
                      if not title:
                          title = entry.replace('-', ' ').replace('_', ' ').strip()
                      last_mod = git_last_modified_iso(index_html) or git_last_modified_iso(p)
                      posts.append({
                          'title': title,
                          'folder': entry,
                          'path': f'/{entry}/index.html',
                          'published_date': published_date or '',
                          'last_modified': last_mod or ''
                      })
              elif os.path.isfile(p) and entry.endswith('.html'):
                  title, published_date = extract_from_html(p)
                  if not title:
                      title = entry.replace('.html','').replace('-', ' ')
                  last_mod = git_last_modified_iso(p)
                  posts.append({
                      'title': title,
                      'folder': '',
                      'path': f'/{entry}',
                      'published_date': published_date or '',
                      'last_modified': last_mod or ''
                  })

          images = []
          if os.path.isdir(images_root):
              for f in sorted(os.listdir(images_root)):
                  fp = os.path.join(images_root, f)
                  if os.path.isfile(fp):
                      images.append({'name': f, 'path': f'/Images/{f}'})

          data = {'posts': posts, 'images': images}
          with open('index.json', 'w', encoding='utf-8') as fh:
              json.dump(data, fh, ensure_ascii=False, indent=2)
          print(f'WROTE index.json: {len(posts)} posts, {len(images)} images')
          PY

      - name: Commit index.json if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add index.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update index.json (titles & dates)"
            git push
