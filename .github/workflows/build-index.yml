name: Build and Commit index.json (robust scan)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Build index.json
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const root = process.cwd();

          function extractPublishedDate(html){
            const m = html.match(/<p>ðŸ“…\s*([^<]+)<\/p>/i);
            return m ? m[1].trim() : null;
          }

          const posts = [];

          // Helper to check folder for index.html
          function inspectFolder(folderPath, folderName){
            const indexFile = path.join(folderPath, 'index.html');
            if (fs.existsSync(indexFile)){
              const html = fs.readFileSync(indexFile,'utf8');
              const stats = fs.statSync(indexFile);
              posts.push({
                folder: folderName,
                path: './' + path.relative(root, indexFile).replace(/\\/g,'/'),
                published_date: extractPublishedDate(html),
                last_modified: stats.mtime.toISOString()
              });
            }
          }

          // 1) Look into Posts/ if exists
          const postsDir = path.join(root,'Posts');
          if (fs.existsSync(postsDir)) {
            fs.readdirSync(postsDir, {withFileTypes:true}).forEach(d=>{
              if (d.isDirectory()) inspectFolder(path.join(postsDir,d.name), d.name);
            });
          }

          // 2) Also scan all top-level directories (covering case where posts are in root folders)
          fs.readdirSync(root, {withFileTypes:true}).forEach(d=>{
            if (d.isDirectory()) {
              const name = d.name;
              // skip common system dirs
              if (['.git','.github','node_modules'].includes(name)) return;
              // skip Images dir here (we handle images separately)
              if (name.toLowerCase() === 'images') return;
              inspectFolder(path.join(root,name), name);
            }
          });

          // 3) Scan Images/ or images/
          const images = [];
          ['Images','images'].forEach(dirName=>{
            const imgsDir = path.join(root, dirName);
            if (fs.existsSync(imgsDir)){
              fs.readdirSync(imgsDir, {withFileTypes:true}).forEach(f=>{
                if (f.isFile()){
                  images.push({ path: './' + path.relative(root, path.join(imgsDir,f.name)).replace(/\\/g,'/'), name: f.name });
                }
              });
            }
          });

          // 4) Write index.json
          const out = { posts, images };
          fs.writeFileSync(path.join(root,'index.json'), JSON.stringify(out,null,2));
          console.log('Generated index.json:');
          console.log(JSON.stringify(out,null,2));
          "

      - name: Commit index.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add index.json
          git diff --quiet || (git commit -m "Auto-update index.json [skip ci]" && git push)
